from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from typing import List, Dict, Any, Optional


def create_project_kb() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
    """
    buttons = [
        [InlineKeyboardButton(text="üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="use_template")],
        [InlineKeyboardButton(text="üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ CSV", callback_data="upload_csv")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_templates_kb(templates: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞

    Args:
        templates: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —à–∞–±–ª–æ–Ω–æ–≤
    """
    buttons = []
    for template in templates:
        buttons.append([InlineKeyboardButton(text=template['name'], callback_data=f"template_{template['id']}")])

    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_project_creation")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_projects_list_kb(projects: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤

    Args:
        projects: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
    """
    buttons = []
    for project in projects:
        start_date = project['start_date'][:10] if 'start_date' in project else "–ù–µ—Ç –¥–∞—Ç—ã"
        buttons.append([InlineKeyboardButton(
            text=f"{project['name']} (–Ω–∞—á–∞–ª–æ: {start_date})",
            callback_data=f"view_project_{project['id']}"
        )])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    buttons.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", callback_data="create_new_project")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_project_actions_kb(project_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞

    Args:
        project_id: ID –ø—Ä–æ–µ–∫—Ç–∞

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    buttons = [
        [InlineKeyboardButton(text="üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω", callback_data=f"calculate_{project_id}")],
        [InlineKeyboardButton(text="üë• –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º", callback_data=f"workload_{project_id}")],
        [InlineKeyboardButton(text="üîÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ Jira", callback_data=f"export_jira_{project_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="back_to_projects")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_employees_list_kb(employees: List[Dict[str, Any]], task_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∑–∞–¥–∞—á—É

    Args:
        employees: –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        task_id: ID –∑–∞–¥–∞—á–∏

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    """
    buttons = []
    for employee in employees:
        buttons.append([InlineKeyboardButton(
            text=f"{employee['name']} ({employee['position']})",
            callback_data=f"set_employee_{task_id}_{employee['id']}"
        )])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_assign_{task_id}")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_admin_kb() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è–º–∏
    """
    buttons = [
        [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="admin_stats")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_user_management_kb(users: List[Dict[str, Any]], current_admin_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

    Args:
        users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        current_admin_id: ID —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    """
    buttons = []

    for user in users:
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
        if user['id'] != current_admin_id:
            action = "block" if user['is_active'] else "unblock"
            label = "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if user['is_active'] else "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
            buttons.append([InlineKeyboardButton(
                text=f"{label} {user['name']} (ID: {user['id']})",
                callback_data=f"user_{action}_{user['id']}"
            )])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_back_button(callback_data: str, text: str = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥") -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"

    Args:
        callback_data: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏
        text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    """
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=text, callback_data=callback_data)]])


def create_yes_no_kb(yes_data: str, no_data: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç"

    Args:
        yes_data: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞"
        no_data: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç"

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç"
    """
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=yes_data),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=no_data)
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)