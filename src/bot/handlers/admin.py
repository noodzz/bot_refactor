import logging
import datetime
import platform
import os
import psutil
from aiogram import Dispatcher, Bot, Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from src.bot.states.forms import AdminState
from src.utils.file_utils import create_safe_filename
from src.bot.keyboards import create_admin_kb, create_user_management_kb, create_back_button

logger = logging.getLogger(__name__)


def register_admin_handlers(dp: Dispatcher, bot: Bot, config):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""

    @dp.message(Command("admin"))
    async def cmd_admin(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
        from src.utils.helpers import is_admin

        if not is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        markup = create_admin_kb()
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

    @dp.callback_query(F.data == "admin_users")
    async def admin_users(callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        from src.utils.helpers import is_admin

        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        db_manager = callback.bot.get('db_manager')
        users = db_manager.get_all_users()

        text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        for user in users:
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if user['is_active'] else "‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            role = "üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user['is_admin'] else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            text += f"ID: {user['id']} - {status}, {role}\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        markup = create_user_management_kb(users, callback.from_user.id)
        await callback.message.edit_text(text, reply_markup=markup)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @dp.callback_query(lambda c: c.data.startswith("user_block_") or c.data.startswith("user_unblock_"))
    async def toggle_user_status(callback: types.CallbackQuery):
        from src.utils.helpers import is_admin

        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        parts = callback.data.split("_")
        action = parts[1]  # "block" –∏–ª–∏ "unblock"
        user_id = int(parts[2])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        db_manager = callback.bot.get('db_manager')

        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_active = action == "unblock"  # True –µ—Å–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, False –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        db_manager.update_user(user_id, is_active=is_active)

        action_text = "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_active else "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {action_text}!")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await admin_users(callback)

    @dp.callback_query(F.data == "add_user")
    async def add_user_start(callback: types.CallbackQuery, state: FSMContext):
        from src.utils.helpers import is_admin

        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:"
        )
        await state.set_state(AdminState.waiting_for_user_id)

    @dp.message(AdminState.waiting_for_user_id)
    async def process_new_user_id(message: types.Message, state: FSMContext):
        from src.utils.helpers import is_admin

        if not is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            await state.clear()
            return

        try:
            user_id = int(message.text.strip())

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            db_manager = message.bot.get('db_manager')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = db_manager.get_user(user_id)

            if existing_user:
                await message.answer(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n"
                    f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if existing_user['is_active'] else '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n"
                    f"–†–æ–ª—å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if existing_user['is_admin'] else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"
                )
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db_manager.add_user(user_id, name=f"User_{user_id}", is_admin=0)
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")]
            ])
            await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)

        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

        await state.clear()

    @dp.callback_query(F.data == "admin_stats")
    async def admin_stats(callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
        from src.utils.helpers import is_admin

        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            db_manager = callback.bot.get('db_manager')

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
            total_projects = db_manager.execute("SELECT COUNT(*) FROM projects")[0][0]
            active_projects = db_manager.execute("SELECT COUNT(*) FROM projects WHERE status = 'active'")[0][0]

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º
            total_tasks = db_manager.execute("SELECT COUNT(*) FROM tasks")[0][0]
            group_tasks = db_manager.execute("SELECT COUNT(*) FROM tasks WHERE is_group = 1")[0][0]
            subtasks = db_manager.execute("SELECT COUNT(*) FROM tasks WHERE parent_id IS NOT NULL")[0][0]

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            total_users = db_manager.execute("SELECT COUNT(*) FROM users")[0][0]
            active_users = db_manager.execute("SELECT COUNT(*) FROM users WHERE is_active = 1")[0][0]
            admin_users = db_manager.execute("SELECT COUNT(*) FROM users WHERE is_admin = 1")[0][0]

            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            projects_by_user = db_manager.execute("""
                SELECT u.id, u.name, COUNT(p.id) as project_count 
                FROM users u 
                LEFT JOIN projects p ON u.id = p.user_id 
                GROUP BY u.id 
                ORDER BY project_count DESC
            """)

            # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            last_project = db_manager.execute(
                "SELECT name, created_at FROM projects ORDER BY created_at DESC LIMIT 1"
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
            stats_text = "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**\n\n"

            stats_text += "**–ü—Ä–æ–µ–∫—Ç—ã:**\n"
            stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {total_projects}\n"
            stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {active_projects}\n"

            stats_text += "\n**–ó–∞–¥–∞—á–∏:**\n"
            stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
            stats_text += f"‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á: {group_tasks}\n"
            stats_text += f"‚Ä¢ –ü–æ–¥–∑–∞–¥–∞—á: {subtasks}\n"

            stats_text += "\n**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
            stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
            stats_text += f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_users}\n"

            stats_text += "\n**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:**\n"
            for user_data in projects_by_user:
                user_id, user_name, count = user_data
                stats_text += f"‚Ä¢ {user_name or f'User_{user_id}'}: {count} –ø—Ä–æ–µ–∫—Ç(–æ–≤)\n"

            if last_project:
                project_name, created_at = last_project[0]
                stats_text += f"\n**–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç:**\n‚Ä¢ {project_name} ({created_at})\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            stats_text += "\n**–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
            stats_text += f"‚Ä¢ –û–°: {platform.system()} {platform.release()}\n"
            stats_text += f"‚Ä¢ Python: {platform.python_version()}\n"

            try:
                process = psutil.Process(os.getpid())
                memory_usage = process.memory_info().rss / 1024 / 1024  # –≤ –ú–ë
                stats_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage:.2f} –ú–ë\n"
                stats_text += f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {(datetime.datetime.now() - datetime.datetime.fromtimestamp(process.create_time())).total_seconds() / 3600:.2f} —á\n"
            except:
                stats_text += "‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            markup = create_back_button("admin")

            await callback.message.edit_text(stats_text, reply_markup=markup)

        except Exception as e:
            markup = create_back_button("admin")
            await callback.message.edit_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
                reply_markup=markup
            )

    @dp.callback_query(F.data == "admin")
    async def back_to_admin(callback: types.CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º—É –º–µ–Ω—é"""
        from src.utils.helpers import is_admin

        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        markup = create_admin_kb()
        await callback.message.edit_text("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)