import os
import tempfile
import logging
import traceback
import datetime
from aiogram import Dispatcher, Bot, Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from src.bot.keyboards import create_back_button
from src.utils.date_utils import format_date

logger = logging.getLogger(__name__)


def register_schedule_handlers(
        dp: Dispatcher,
        bot: Bot,
        schedule_service,
        project_service,
        task_service,
        employee_service,
        gantt_chart
):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""

    @dp.callback_query(lambda c: c.data.startswith("calculate_"))
    async def calculate_schedule(
            callback: types.CallbackQuery,
            schedule_service=schedule_service,
            project_service=project_service,
            task_service=task_service,
            employee_service=employee_service,
            gantt_chart=gantt_chart
    ):
        project_id = int(callback.data.split("_")[1])

        await callback.message.edit_text("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—á–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ –∑–∞–¥–∞—á–∞—Ö
            project = project_service.get_project_details(project_id)
            tasks = task_service.get_tasks_by_project(project_id)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω
            result = schedule_service.calculate_schedule(project.to_dict(), [task.to_dict() for task in tasks])

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            task_dates = result['task_dates']
            critical_path = result['critical_path']
            duration = result['duration']

            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            logger.info(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å: {critical_path}")
            logger.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: {duration} –¥–Ω–µ–π")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            text = f"üìä –û–¢–ß–ï–¢ –ü–û –ö–ê–õ–ï–ù–î–ê–†–ù–û–ú–£ –ü–õ–ê–ù–£\n"
            text += f"=============================================\n\n"
            text += f"üìã –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–ï–ö–¢–ï\n"
            text += f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: '{project.name}'\n"

            # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
            if result['task_dates']:
                start_dates = [datetime.datetime.strptime(dates['start'], '%Y-%m-%d') for dates in
                               result['task_dates'].values()]
                end_dates = [datetime.datetime.strptime(dates['end'], '%Y-%m-%d') for dates in
                             result['task_dates'].values()]

                if start_dates and end_dates:
                    project_start = min(start_dates)
                    project_end = max(end_dates)
                    project_duration = (project_end - project_start).days + 1
                    text += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: {project_duration} –¥–Ω–µ–π\n"
                    text += f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {project_start.strftime('%d.%m.%Y')}\n"
                    text += f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {project_end.strftime('%d.%m.%Y')}\n\n"
                    text += f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: {len(tasks)}\n\n"
                else:
                    text += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: {result['duration']} –¥–Ω–µ–π\n\n"
            else:
                text += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: {result['duration']} –¥–Ω–µ–π\n\n"

            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å
            text += f"üö© –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–£–¢–¨\n"
            text += f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å ‚Äî –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞.\n"
            text += f"–ó–∞–¥–µ—Ä–∂–∫–∞ –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö –∑–∞–¥–∞—á –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –∑–∞–¥–µ—Ä–∂–∫–µ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.\n\n"

            if result['critical_path']:
                critical_tasks = []
                total_critical_days = 0

                for task_id in result['critical_path']:
                    task = task_service.get_task(task_id)
                    critical_tasks.append(task)
                    total_critical_days += task.duration - 1

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    start_date = "?"
                    end_date = "?"
                    if task_id in result['task_dates']:
                        start_date = format_date(result['task_dates'][task_id]['start'])
                        end_date = format_date(result['task_dates'][task_id]['end'])

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
                    text += f"‚Ä¢ {task.name} ({task.duration} –¥–Ω.)\n"
                    text += f"  –î–∞—Ç—ã: {start_date} - {end_date}\n"

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ, –µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω
                    if task.employee_id:
                        try:
                            employee = employee_service.get_employee(task.employee_id)
                            text += f"  –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {employee.name} ({employee.position})\n"
                        except:
                            pass
                    text += "\n"
                text += f"–î–ª–∏–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏: {total_critical_days} –¥–Ω–µ–π\n\n"
            else:
                text += "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                text += "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏\n"
                text += "‚Ä¢ –í—Å–µ –∑–∞–¥–∞—á–∏ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ\n"
                text += "‚Ä¢ –ó–∞–¥–∞—á–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é: "

                # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                sorted_tasks = sorted(tasks, key=lambda t: t.duration, reverse=True)
                long_tasks = [t.name for t in sorted_tasks[:3] if t.duration > 0]

                if long_tasks:
                    text += ", ".join(long_tasks) + "\n\n"
                else:
                    text += "–Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
            text += f"üë• –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–î–ê–ß\n"

            employee_workload = employee_service.get_employee_workload(project_id)
            if employee_workload:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
                for employee_id, data in employee_workload.items():
                    text += f"{data['name']} ({data['position']}):\n"

                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–∞–º
                    sorted_tasks = sorted(data['tasks'],
                                          key=lambda t: t.get('start_date', '9999-12-31')
                                          if t.get('start_date') else '9999-12-31')

                    for task in sorted_tasks:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã
                        start_date = "?"
                        end_date = "?"

                        if task['id'] in result['task_dates']:
                            start_date = format_date(result['task_dates'][task['id']]['start'])
                            end_date = format_date(result['task_dates'][task['id']]['end'])
                        elif task.get('start_date') and task.get('end_date'):
                            start_date = format_date(task['start_date'])
                            end_date = format_date(task['end_date'])

                        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
                        text += f"  ‚Ä¢ {task['name']} ({task['duration']} –¥–Ω.)\n"
                        text += f"    –î–∞—Ç—ã: {start_date} - {end_date}\n"

                    # –°—É–º–º–∞—Ä–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                    total_load = sum(task['duration'] for task in data['tasks'])
                    text += f"  –û–±—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {total_load} –¥–Ω–µ–π\n\n"
            else:
                text += "\n–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏."

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è
            text += f"üìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\n"
            text += f"1. –û–±—Ä–∞—Ç–∏—Ç–µ –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞—á–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏\n"
            text += f"2. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É –º–µ–∂–¥—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏\n"
            text += f"3. –î–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Ä–æ–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
            text += f"=============================================\n"
            text += f"–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            text += f"–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ì–∞–Ω—Ç–∞
            gantt_image = gantt_chart.generate(project.to_dict(), [task.to_dict() for task in tasks],
                                               result['task_dates'], result['critical_path'])

            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç—á–µ—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ MESSAGE_TOO_LONG
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            safe_project_name = "".join(c if c.isalnum() or c in [' ', '.', '_', '-'] else '_' for c in project.name)

            temp_dir = tempfile.mkdtemp()
            report_file_path = os.path.join(temp_dir, f"{safe_project_name}_report.txt")

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
            with open(report_file_path, 'w', encoding='utf-8') as file:
                file.write(text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–∞–π–ª
            await callback.message.edit_text(
                f"–†–∞—Å—á–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project.name}' –∑–∞–≤–µ—Ä—à–µ–Ω.\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: {result.get('duration', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')} –¥–Ω–µ–π.\n"
                f"–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø—Ä–∏–ª–∞–≥–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª–µ."
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º
            report_file = FSInputFile(report_file_path)
            await bot.send_document(
                callback.from_user.id,
                report_file,
                caption=f"–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project.name}'"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ì–∞–Ω—Ç–∞
            gantt_file = FSInputFile(gantt_image)
            await bot.send_photo(
                callback.from_user.id,
                gantt_file,
                caption=f"–î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project.name}'",
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            buttons = [
                [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", callback_data=f"workload_{project_id}")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", callback_data=f"view_project_{project_id}")]
            ]

            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback.message.reply("–†–∞—Å—á–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω—ã",
                                         reply_markup=markup)

            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            try:
                if os.path.exists(report_file_path):
                    os.remove(report_file_path)
                if os.path.exists(gantt_image):
                    os.remove(gantt_image)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞: {str(e)}\n{traceback.format_exc()}"
            logger.error(error_msg)
            await callback.message.edit_text(error_msg)
            return