import os
import tempfile
import logging
from aiogram import Dispatcher, Bot, Router, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile

from src.utils.auth_utils import is_authorized
from src.utils.context import get_service
from src.utils.date_utils import validate_date_format, format_date
from src.data.csv.parser import parse_csv
from src.bot.states.forms import ProjectState
from src.bot.keyboards import (
    create_project_kb, create_templates_kb, create_projects_list_kb,
    create_project_actions_kb, create_back_button
)

logger = logging.getLogger(__name__)


def register_project_handlers(dp: Dispatcher, bot: Bot, project_service, task_service):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏"""

    @dp.message(Command("ping"))
    async def cmd_ping(message: types.Message):
        """Simple ping command that bypasses auth"""
        print(f"PING received from {message.from_user.id}")
        await message.answer("PONG!")

    @dp.message(CommandStart())
    async def cmd_start(message: types.Message):
        # Direct logging regardless of authorization
        print(f"START COMMAND RECEIVED from user {message.from_user.id}")
        logger.info(f"START COMMAND RECEIVED from user {message.from_user.id}")

        try:
            if not is_authorized(message.from_user.id):
                user_id = message.from_user.id
                await message.answer(
                    f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
                    f"–í–∞—à ID: {user_id}\n"
                    f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
                )
                return

            welcome_text = (
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏!\n\n"
                # Rest of welcome message...
            )
            await message.answer(welcome_text)
        except Exception as e:
            error_msg = f"Error in start handler: {str(e)}"
            print(error_msg)
            logger.error(error_msg)
            # Try to respond even if there's an error
            await message.answer(f"Error processing your command: {str(e)}")

    @dp.message(Command("help"))
    async def cmd_help(message: types.Message):
        help_text = (
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/create_project - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ CSV\n"
            "/list_projects - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
            "–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å:\n"
            "1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ CSV-—Ñ–∞–π–ª–∞\n"
            "2. –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω\n"
            "3. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º\n"
            "4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ Jira"
        )
        await message.answer(help_text)

    @dp.message(Command("cancel"))
    async def cmd_cancel(message: types.Message, state: FSMContext):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()

        if current_state is None:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ—á–∏—â–∞–µ–º –µ–≥–æ –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await state.clear()

        # –í—ã–≤–æ–¥–∏–º —Ä–∞–∑–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
        if current_state.startswith('ProjectState:'):
            await message.answer("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?")
        elif current_state.startswith('TaskState:'):
            await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        elif current_state.startswith('AdminState:'):
            await message.answer("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await message.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        help_text = (
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/create_project - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç\n"
            "/list_projects - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
        )
        await message.answer(help_text)

    @dp.message(Command("create_project"))
    async def cmd_create_project(message: types.Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
        await state.set_state(ProjectState.waiting_for_name)

    @dp.message(ProjectState.waiting_for_name)
    async def process_project_name(message: types.Message, state: FSMContext):
        await state.update_data(project_name=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD):")
        await state.set_state(ProjectState.waiting_for_start_date)

    @dp.message(ProjectState.waiting_for_start_date)
    async def process_start_date(message: types.Message, state: FSMContext):
        start_date = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        if not validate_date_format(start_date):
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-05-14)."
            )
            return

        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
        await state.update_data(start_date=start_date)

        markup = create_project_kb()
        await message.answer("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç?", reply_markup=markup)
        await state.set_state(ProjectState.waiting_for_choice)

    @dp.callback_query(F.data == "use_template", ProjectState.waiting_for_choice)
    async def process_template_choice(callback: types.CallbackQuery, state: FSMContext):
        templates = project_service.get_templates()

        markup = create_templates_kb(templates)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:")
        await callback.message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:", reply_markup=markup)
        await state.set_state(ProjectState.waiting_for_template)

    @dp.callback_query(ProjectState.waiting_for_template)
    async def process_template_selection(callback: types.CallbackQuery, state: FSMContext):
        template_id = int(callback.data.split('_')[1])
        user_data = await state.get_data()

        try:
            user_id = callback.from_user.id
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}")

            project_id = project_service.create_from_template(
                user_data['project_name'],
                user_data['start_date'],
                template_id,
                user_id=user_id
            )

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É
            buttons = [
                [InlineKeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data=f"view_project_{project_id}")],
                [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="back_to_projects")]
            ]
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)

            await callback.message.edit_text(
                f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{user_data['project_name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞!\n\n"
                f"ID –ø—Ä–æ–µ–∫—Ç–∞: {project_id}\n\n"
                f"–í—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏, "
                f"–∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω.",
                reply_markup=markup
            )
        except Exception as e:
            await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")

        await state.clear()

    @dp.callback_query(F.data == "upload_csv", ProjectState.waiting_for_choice)
    async def process_csv_choice(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞.\n"
            "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã:\n"
            "- –ó–∞–¥–∞—á–∞ - –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n"
            "- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ –≤ –¥–Ω—è—Ö\n"
            "- –¢–∏–ø - –¢–∏–ø –∑–∞–¥–∞—á–∏ (–æ–±—ã—á–Ω–∞—è –∏–ª–∏ –≥—Ä—É–ø–ø–æ–≤–∞—è)\n"
            "- –î–æ–ª–∂–Ω–æ—Å—Ç—å - –¢—Ä–µ–±—É–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏\n"
            "- –ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ - –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
            "- –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ - –î–ª—è –ø–æ–¥–∑–∞–¥–∞—á —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏\n"
            "- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è - –î–ª—è –ø–æ–¥–∑–∞–¥–∞—á —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –º–æ–≥—É—Ç –ª–∏ –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–¥–∞/–Ω–µ—Ç)\n"
            "\n"
            "–®–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ: https://docs.google.com/spreadsheets/d/1n-He466tyHoeZVLSUfI8A4YuXfCdf9W7yLyrT8v2ZI8/edit?gid=0#gid=0"
        )
        await state.set_state(ProjectState.waiting_for_csv)

    @dp.message(ProjectState.waiting_for_csv)
    async def process_csv_file(message: types.Message, state: FSMContext):
        if not message.document:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª.")
            return

        try:
            file = await bot.get_file(message.document.file_id)
            file_path = file.file_path
            downloaded_file = await bot.download_file(file_path)

            user_data = await state.get_data()
            csv_content = downloaded_file.read().decode('utf-8')
            project_data = parse_csv(csv_content)

            user_id = message.from_user.id
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ CSV. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}")

            project_id = project_service.create_from_csv(
                user_data['project_name'],
                user_data['start_date'],
                project_data,
                user_id=user_id
            )

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É
            buttons = [
                [InlineKeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data=f"view_project_{project_id}")],
                [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="back_to_projects")]
            ]
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)

            await message.answer(
                f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{user_data['project_name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏–∑ CSV!\n\n"
                f"ID –ø—Ä–æ–µ–∫—Ç–∞: {project_id}\n\n"
                f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(project_data)} –∑–∞–¥–∞—á. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω.",
                reply_markup=markup
            )
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV: {str(e)}")

        await state.clear()

    @dp.message(Command("list_projects"))
    async def cmd_list_projects(message: types.Message):
        if not is_authorized(message.from_user.id):
            return

        projects = project_service.get_all_projects(user_id=message.from_user.id)

        if not projects:
            await message.answer("–ü—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create_project")
            return

        markup = create_projects_list_kb(projects)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)

    @dp.callback_query(lambda c: c.data.startswith("view_project_"))
    async def view_project_callback(callback: types.CallbackQuery, project_service=None, task_service=None):
        try:
            project_id = int(callback.data.split("_")[2])
        except (ValueError, IndexError):
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞")
            return

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            # –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫–æ–π-—Ç–æ —Å–µ—Ä–≤–∏—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_service
            _project_service = project_service or get_service("project_service")
            _task_service = task_service or get_service("task_service")
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–µ–∫—Ç–µ
            project = project_service.get_project_details(project_id)
            tasks = task_service.get_tasks_by_project(project_id)

            text = f"–ü—Ä–æ–µ–∫—Ç: {project.name}\n"
            text += f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {format_date(project.start_date)}\n"
            text += f"–°—Ç–∞—Ç—É—Å: {project.status}\n\n"

            if tasks:
                text += "–ó–∞–¥–∞—á–∏:\n"
                for task in tasks:
                    text += f"‚Ä¢ {task.name} "
                    text += f"({task.duration} –¥–Ω.) "

                    if task.is_group:
                        text += "[–ì—Ä—É–ø–ø–æ–≤–∞—è –∑–∞–¥–∞—á–∞]\n"
                        subtasks = task_service.get_subtasks(task.id)
                        for subtask in subtasks:
                            employee = None
                            if subtask.employee_id:
                                try:
                                    employee_service = callback.bot.dispatcher.get("employee_service")
                                    employee = employee_service.get_employee(subtask.employee_id)
                                except ValueError:
                                    pass

                            employee_name = f"{employee.name} ({employee.position})" if employee else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                            text += f"  ‚Ü≥ {subtask.name} - {employee_name}\n"
                    else:
                        employee = None
                        if task.employee_id:
                            try:
                                employee_service = callback.bot.dispatcher.get("employee_service")
                                employee = employee_service.get_employee(task.employee_id)
                            except ValueError:
                                pass

                        text += f"- {employee.name} ({employee.position})" if employee else "- –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n"
            else:
                text += "–ó–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
            if len(text) > 3500:  # –õ–∏–º–∏—Ç Telegram —Å –∑–∞–ø–∞—Å–æ–º
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                temp_dir = tempfile.mkdtemp()
                safe_project_name = "".join(
                    c if c.isalnum() or c in [' ', '.', '_', '-'] else '_' for c in project.name
                )
                file_path = os.path.join(temp_dir, f"{safe_project_name}_details.txt")

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
                with open(file_path, 'w', encoding='utf-8') as file:
                    file.write(text)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                await callback.message.edit_text(
                    f"–ü—Ä–æ–µ–∫—Ç: {project.name}\n"
                    f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {format_date(project.start_date)}\n"
                    f"–°—Ç–∞—Ç—É—Å: {project.status}\n\n"
                    f"–ü—Ä–æ–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ –∑–∞–¥–∞—á, –ø–æ–ª–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –≤ —Ñ–∞–π–ª–µ:"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º
                file = FSInputFile(file_path)
                await bot.send_document(
                    callback.from_user.id,
                    file,
                    caption=f"–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ '{project.name}'"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
                markup = create_project_actions_kb(project_id)
                await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                try:
                    if os.path.exists(file_path):
                        os.remove(file_path)
                    os.rmdir(temp_dir)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}")
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                markup = create_project_actions_kb(project_id)
                await callback.message.edit_text(text, reply_markup=markup)

        except Exception as e:
            await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")

    @dp.callback_query(F.data == "back_to_projects")
    async def back_to_projects(callback: types.CallbackQuery):
        projects = project_service.get_all_projects()
        markup = create_projects_list_kb(projects)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)